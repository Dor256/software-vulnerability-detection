from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, roc_curve
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline, make_pipeline
from imblearn.under_sampling import RandomUnderSampler
from imblearn.over_sampling import RandomOverSampler
import chalk
import pandas as pd
import pickle

def printRed(st):
    print(chalk.Chalk('red')(st, underline=True))

def printGreen(st):
    print(chalk.Chalk('green')(st, underline=True, bold=True))

def printYellow(st):
    print(chalk.Chalk('yellow')(st, underline=True))

def printBlue(st):
    print(chalk.Chalk('blue')(st, underline=True))

data = pd.read_csv("./JSVulnerabilityDataSet-1.0.csv")

parametersIndex = data.columns.get_loc("CC")
resultIndex = data.columns.get_loc("Vuln")
X = data.iloc[:, parametersIndex:resultIndex]
Y = data.iloc[:, resultIndex]

under = RandomUnderSampler()
over = RandomOverSampler()

models = {
    "Logistic Regression": LogisticRegression(solver='newton-cg'),
    "KNN": KNeighborsClassifier(),
    "Decision Tree": DecisionTreeClassifier()
}

metrics = {
    "accuracy": accuracy_score,
    "f1": f1_score,
    "precision": precision_score,
    "recall": recall_score,
    # "ROC curve": roc_curve
}

def printMetrics(model, Xtest, Ytest):
    YPredict = model.predict(Xtest)
    for key, metric in metrics.items():
        printYellow(key + " " + ("%.2f" % metric(Ytest, YPredict)))
    [tn, fp], [fn, tp] = confusion_matrix(Ytest, YPredict, normalize="true")
    printBlue("Confusion matrix:")
    printBlue("TP: " + "%.2f" % tp + ", " + "FP: " + "%.2f" % fp)
    printBlue("FN: " + "%.2f" % fn + ", " + "TN: " + "%.2f" % tn)

for modelName, modelType in models.items():
    Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y)
    
    Xtrain_over, Ytrain_over = over.fit_resample(Xtrain, Ytrain)
    model_over_sample = make_pipeline(StandardScaler(), modelType)
    model_over_sample.fit(Xtrain_over, Ytrain_over)

    Xtrain_under, Ytrain_under = under.fit_resample(Xtrain, Ytrain)
    model_under_sample = make_pipeline(StandardScaler(), modelType)
    model_under_sample.fit(Xtrain_under, Ytrain_under)

    model_no_resampling = make_pipeline(StandardScaler(), modelType)
    model_no_resampling.fit(Xtrain, Ytrain)

    printGreen("\n" + modelName + "\n" + "=" * len(modelName))
    printRed("No sampling")
    printMetrics(model_no_resampling, Xtest, Ytest)
    printRed("Over sampling")
    printMetrics(model_over_sample, Xtest, Ytest)
    printRed("Under sampling")
    printMetrics(model_under_sample, Xtest, Ytest)
    pickle.dump(model_no_resampling, open('./models/' + modelName.lower().replace(' ', '_') + '_no_sampling', 'wb'));
    pickle.dump(model_over_sample, open('./models/' + modelName.lower().replace(' ', '_') + '_over_sampling', 'wb'));
    pickle.dump(model_under_sample, open('./models/' + modelName.lower().replace(' ', '_') + '_under_sampling', 'wb'));
