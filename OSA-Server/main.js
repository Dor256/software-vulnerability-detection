const {execSync} = require('child_process')
const express = require('express');
const { writeFileSync, mkdirSync, readFileSync, readdirSync } = require('fs');
const { v4 } = require('uuid');
const escomplex = require('escomplex');

const app = express();

app.use(express.text());

const OSARelevantColumns = [
    "CC",
    "CCL",
    "CCO",
    "CI",
    "CLC",
    "McCC",
    "NL",
    "NLE",
    "CD",
    "CLOC",
    "DLOC",
    "TCD",
    "TCLOC",
    "LLOC",
    "LOC",
    "NOS",
    "NUMPAR",
    "TLLOC",
    "TLOC",
    "TNOS",
];

const parseHalsteadParams = (halsteadParams) => {
    return {
        HOR_D: halsteadParams.operators.distinct,
        HOR_T: halsteadParams.operators.total,
        HON_D: halsteadParams.operands.distinct,
        HON_T: halsteadParams.operands.total,
        HLEN: halsteadParams.length,
        HVOC: halsteadParams.vocabulary,
        HDIFF: halsteadParams.difficulty,
        HVOL: halsteadParams.volume,
        HEFF: halsteadParams.effort,
        HBUGS: halsteadParams.bugs,
        HTIME: halsteadParams.time,
    }
}

const parseEscomplexResult = (escomplexResult) => {
    const parsedHalsteadParams = parseHalsteadParams(escomplexResult.functions[0].halstead);
    return Object.assign({
        CYCL_DENS: escomplexResult.functions[0].cyclomaticDensity,
        PARAMS: escomplexResult.functions[0].params,
        CYCL: escomplexResult.functions[0].cyclomatic
    }, parsedHalsteadParams);
}

app.post('/', (req, res) => {
    // 1. Read function from request
    const func = req.body;
    // 2. Save function to file inside a uuid named project
    const folderId = v4()
    mkdirSync(`${folderId}`);
    writeFileSync(`./${folderId}/func.js`, func);
    // 3. Run OpenStaticAnalyzerJavaScript on project
    execSync(`./analyze.sh ${folderId}`);
    // 3.1. Run escomplex on function
    const esComplexRes = escomplex.analyse(func);
    const esComplexParsed = parseEscomplexResult(esComplexRes);
    
    // 4. Read results file
    const [folder] = readdirSync(`${__dirname}/${folderId}/${folderId}/javascript/`);
    const functionFile = readFileSync(`${__dirname}/${folderId}/${folderId}/javascript/${folder}/${folderId}-Function.csv`, 'utf-8');
    const [headers, OSAFunc] = functionFile.split('\n').filter(l => !!l).map(line => line.replace(/\"/g, '')).map(line => line.split(','));
    
    const headerLocs = headers.reduce((locs, header, idx) => {
        if (OSARelevantColumns.includes(header)) {
            locs[header] = idx
        }
        return locs;
    }, {});

    result = OSARelevantColumns.reduce((obj, col) => {
        return Object.assign(obj, {
            [col]: OSAFunc[headerLocs[col]]
        })
    }, {CLLC: 0});

    // 5. Combine + return results
    res.send(Object.assign(result, esComplexParsed));
});

app.listen(3000, () => {
    console.log('Static analysis server is up and running');    
})
